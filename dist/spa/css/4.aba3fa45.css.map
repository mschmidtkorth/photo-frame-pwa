{
  "version": 3,
  "sources": [
    "webpack:///./src/pages/src/pages/PageSlideshow.vue"
  ],
  "names": [],
  "mappings": ";AA+OA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;AACA;AAEA;EACA;AACA;AACA;EACA;AACA;AACA;;EAEA;EACA;AACA",
  "file": "css/4.aba3fa45.css",
  "sourcesContent": [
    "<template>\n  <div class=\"\">\n    <q-carousel\n      swipeable\n      v-model=\"$store.currentSlideIndex\"\n      :autoplay=\"$store.autoplay\"\n      transition-next=\"slide-fade\"\n      transition-prev=\"slide-fade\"\n      :fullscreen.sync=\"fullscreen\"\n      animated\n      infinite\n      :height=\"windowHeight\"\n      @click=\"showControls\"\n    >\n      <!-- <img\n        src=\"images/no-images.png\"\n        alt=\"no-images\"\n        class=\"fit\"\n        style=\"object-fit: cover;\"\n      /> -->\n      <q-carousel-slide\n        v-for=\"(img, index) in images\"\n        :key=\"index\"\n        :name=\"index\"\n        :img-src=\"img.baseUrl\"\n      />\n      <template v-slot:control>\n        <q-carousel-control\n          position=\"bottom-right\"\n          :offset=\"[18, 18]\"\n          :class=\"controlClass\"\n        >\n          <q-btn\n            push\n            square\n            dense\n            color=\"grey\"\n            size=\"md\"\n            text-color=\"white\"\n            :icon=\"fullscreen ? 'fullscreen_exit' : 'fullscreen'\"\n            @click=\"toggleFullScreen\"\n          />\n        </q-carousel-control>\n        <q-carousel-control\n          position=\"top-right\"\n          :offset=\"[18, 18]\"\n          class=\"text-white rounded-borders\"\n          :class=\"controlClass\"\n          style=\"background: rgba(0, 0, 0, .3); padding: 4px 8px;\"\n        >\n          <q-toggle\n            dense\n            dark\n            color=\"orange\"\n            v-model=\"newImagesOnly\"\n            :label=\"'Only New (' + newImageCt + ')'\"\n          />\n        </q-carousel-control>\n\n        <q-carousel-control\n          position=\"top-right\"\n          :class=\"controlClass\"\n          :offset=\"[18, 60]\"\n        >\n          <q-btn\n            push\n            square\n            size=\"md\"\n            dense\n            color=\"grey\"\n            text-color=\"white\"\n            :icon=\"$store.autoplay === 0 ? 'play_arrow' : 'pause'\"\n            @click=\"$store.autoplay = $store.autoplay === 0 ? 8000 : 0\"\n          />\n        </q-carousel-control>\n        <q-carousel-control\n          position=\"top-right\"\n          :class=\"controlClass\"\n          :offset=\"[18, 100]\"\n        >\n          <q-btn\n            push\n            square\n            size=\"md\"\n            dense\n            color=\"grey\"\n            text-color=\"white\"\n            :icon=\"$store.newImages ? 'check' : 'cached'\"\n            @click=\"\n              $store.newImages\n                ? $actions.markImagesRead()\n                : $actions.loadImages(false)\n            \"\n          />\n        </q-carousel-control>\n        <q-carousel-control\n          position=\"top-right\"\n          :class=\"controlClass\"\n          :offset=\"[18, 140]\"\n        >\n          <q-btn\n            push\n            square\n            size=\"md\"\n            dense\n            color=\"grey\"\n            text-color=\"white\"\n            icon=\"shuffle\"\n            @click=\"shuffleImages\"\n          />\n        </q-carousel-control>\n        <q-carousel-control position=\"bottom-left\" :offset=\"[0, 18]\">\n          <q-btn\n            square\n            size=\"md\"\n            dense\n            text-color=\"warning\"\n            icon=\"new_releases\"\n            :class=\"{ hidden: !$store.newImages }\"\n          />\n        </q-carousel-control>\n      </template>\n    </q-carousel>\n  </div>\n</template>\n\n<script>\nimport { store, actions } from '../boot/store'\nlet timeout = null\nlet wakeLock = null\n\nconst requestWakeLock = async () => {\n  try {\n    wakeLock = await navigator.wakeLock.request('screen')\n    wakeLock.addEventListener('release', () => {\n      console.log('Screen Wake Lock released:', wakeLock.released)\n    })\n    console.log('Screen Wake Lock released:', wakeLock.released)\n  } catch (err) {\n    console.error(`${err.name}, ${err.message}`)\n  }\n}\nconst handleVisibilityChange = async () => {\n  if (wakeLock !== null && document.visibilityState === 'visible') {\n    await requestWakeLock()\n  }\n}\ndocument.addEventListener('visibilitychange', handleVisibilityChange)\nexport default {\n  data () {\n    return {\n      controlClass: 'hidden',\n      windowHeight: 0,\n      fullscreen: false,\n      $store: store,\n      $actions: actions,\n      interval: null,\n      newImagesOnly: false\n    }\n  },\n  computed: {\n    images () {\n      if ($store.images.length > 0) {\n        this.$q.loading.hide()\n      }\n      if (this.newImagesOnly) {\n        const images = $store.images.filter(i => i.new)\n        if (images.length === 0) {\n          images.push({ id: 'no-images', baseUrl: 'images/no-images.png' })\n        }\n        return images\n      }\n      return $store.images\n    },\n    newImageColor () {\n      return $store.newImages ? 'warning' : ''\n    },\n    newImageCt () {\n      const images = $store.images.filter(i => {\n        return i.new && i.id !== 'no-images'\n      })\n      return images.length\n    }\n  },\n  watch: {\n    images: function (val) {\n      if ($store.currentSlideIndex > val.length) {\n        $store.currentSlideIndex = 0\n      }\n    }\n  },\n  methods: {\n    showControls: function () {\n      this.controlClass = ''\n      if (timeout) {\n        clearTimeout(timeout) // cancel the previous timer.\n        timeout = null\n      }\n      timeout = setTimeout(\n        function () {\n          this.controlClass = 'hidden'\n          clearTimeout((this.timeout = null))\n        }.bind(this),\n        4000\n      )\n    },\n    toggleFullScreen: function () {\n      this.fullscreen = !this.fullscreen\n      if (this.$q.fullscreen.isActive !== this.fullscreen) {\n        this.$q.fullscreen.toggle()\n      }\n    },\n    shuffleImages: function () {\n      this.$actions.shuffleImages()\n    },\n    onlyNew: function () {\n      this.newImagesOnly = !this.newImagesOnly\n      $store.currentSlideIndex = 0\n    }\n  },\n  async created () {\n    this.windowHeight = window.innerHeight - 124 + 'px'\n    this.$q.loading.show()\n    if ('wakeLock' in navigator) {\n      await requestWakeLock()\n    } else {\n      // alert('Wake lock not supported')\n      console.log('wakelock:', 'wakeLock' in navigator)\n    }\n  },\n  async beforeDestroy () {\n    if ('wakeLock' in navigator) {\n      wakeLock.release()\n      // wakeLock = null\n    }\n  }\n}\n</script>\n<style>\n.q-carousel__slide {\n  min-height: 100%;\n  background-size: contain;\n  background-position: 50%;\n  background-repeat: no-repeat;\n}\n.q-carousel__slides-container {\n  height: 100%;\n  background-color: black;\n}\n\n.q-transition--slide-fade-enter-active {\n  transition: all 3s cubic-bezier(0.33, 1, 0.68, 1);\n}\n.q-transition--slide-fade-leave-active {\n  transition: all 3s cubic-bezier(0.32, 0, 0.67, 0);\n}\n.q-transition--slide-fade-enter,\n.q-transition--slide-fade-leave-to {\n  opacity: 0;\n  position: absolute;\n}\n</style>\n"
  ],
  "sourceRoot": ""
}
